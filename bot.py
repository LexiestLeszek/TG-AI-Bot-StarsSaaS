from together import Together
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
LLM_API = ''
TOKEN = ''
CHANNEL_ID = ''   
CHANNEL_LINK = '' 
PRICE_MON = 500   

# --- LLM ---
together_client = Together(api_key=LLM_API)
def ask_llm(user_prompt, system_prompt):
    response = together_client.chat.completions.create(
        model="deepseek-ai/DeepSeek-V3",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        temperature=1.1
    )
    return response.choices[0].message.content

# --- –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò ---
async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        chat_member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        print(f"User {user_id} membership status: {chat_member.status}")
        return chat_member.status in ['member', 'administrator', 'creator', 'owner']
    except Exception as e:
        print(f"Error checking channel membership: {e}")
        return False

# --- –û–¢–ü–†–ê–í–ö–ê –ü–û–î–°–ö–ê–ó–ö–ò –ü–û–î–ü–ò–°–ê–¢–¨–°–Ø ---
async def send_subscription_prompt(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton(f"{PRICE_MON} Stars ‚≠ê –≤ –º–µ—Å—è—Ü", url=CHANNEL_LINK)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "üîí –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
        f"–û–ø–ª–∞—Ç–∞: {PRICE_MON} Stars –∑–∞ –±–µ–∑–ª–∏–º–∏—Ç –Ω–∞ –º–µ—Å—è—Ü.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–Ω–∏—é."
    )
    await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

# --- –•–ï–ù–î–õ–ï–† /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    # —Å–±—Ä–æ—Å–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['history_str'] = ""
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø ‚Äì —Ç–≤–æ–π –ò–ò –±–æ—Ç ü§µ‚Äç‚ôÇÔ∏è\n\n"
        "–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏ –Ø –¥–∞–º –æ—Ç–≤–µ—Ç, –ø–æ–º–Ω—è –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.\n"
        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
    )
    await context.bot.send_message(chat_id=user.id, text=text)
    
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await context.bot.send_message(chat_id=user.id, text='–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ó–≤–µ–∑–¥—ã" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram –∏ –æ—Ç–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫—É —Ç–∞–º.')

# --- –•–ï–ù–î–õ–ï–† –í–°–ï–• –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_name = update.effective_user.name
    user_text = update.message.text
    
    print(f"[Msg] User {user_id} {user_name}: {user_text}\n")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_subscription(user_id, context):
        await send_subscription_prompt(user_id, context)
        return
    
    SYSTEM_PROMPT = """
    –¢—ã ‚Äì –±–æ—Ç.
    """
    
    # 3. –ó–∞–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é (–∏–ª–∏ –ø—É—Å—Ç—É—é)
    history_str = context.user_data.get('history_str', "")

    # 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history_str += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}\n"
    
    prompt_for_llm = f"""
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ c –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:

    {history_str}
    –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ú–∞–∫–∏–∞–≤–µ–ª–ª–∏:
    """

     # 6. –ü–∏—à–µ–º ¬´–ø–µ—á–∞—Ç–∞–µ—Ç...¬ª –∏ –∑–æ–≤—ë–º –º–æ–¥–µ–ª—å
    await context.bot.send_chat_action(chat_id=user_id, action="typing")
    try:
        assistant_text = ask_llm(prompt_for_llm, SYSTEM_PROMPT)
        print(f"[Msg] Bot: {assistant_text}\n")

        # 7. –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_str += f"–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ú–∞–∫–∏–∞–≤–µ–ª–ª–∏: {assistant_text}\n"

        # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –±–µ–∑ —É—Å–µ—á–µ–Ω–∏—è
        context.user_data['history_str'] = history_str

        # 9. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=user_id, text=assistant_text)

    except Exception as e:
        print(f"LLM error: {e}")
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."
        )
    
# --- MAIN ---
def main() -> None:
    print("... bot started ...")
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
